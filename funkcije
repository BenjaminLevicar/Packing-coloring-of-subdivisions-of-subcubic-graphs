def generate_subcubic_graphs(n):
""" Generates all subcubic graphs with n vertices"""
    return [G for G in graphs.nauty_geng(f"{n} -c -D3")]

def narisi_grafe(n):
""" Draws all subcubic graphs with n vestices"""
    subcubic_graphs = generate_subcubic_graphs(n)
    for i, graph in enumerate(subcubic_graphs):
        print(f"Graph {i + 1}:")
        cleaned_edges = [(u, v) for u, v, *_ in graph.edges()]
        print("Edges:", cleaned_edges)
        graph.show(title=f"Graph {i + 1}", vertex_size=300, vertex_color="gold")


n = 5
for graph in generate_subcubic_graphs(n):
    G = graph  
    V = G.vertices()
#E = G.edges(labels=False)
    n = len(G.vertices())

    b = 10  # Maximum number of colors to test

# Initialize the ILP problem
    p = MixedIntegerLinearProgram(maximization=False)
    X = p.new_variable(binary=True)  # X_h: Binary variables for color usage
    Y = p.new_variable(binary=True)  # Y_i^h: Binary variables for vertex-color assignment
    Z = p.new_variable(binary=True)  # Z_i,j^h Binary variables for vertex-vertex-color assignment
    C = G.distance_matrix()

# Objective Function: Minimize the number of colors used
    p.set_objective(p.sum(X[k] for k in range(1, b)))

# Constraint 1: If the color k is not used, the color k+1 will also not be used
    for k in range(1, b):
        p.add_constraint(X[k] >= X[k+1])

# Constraint 2: Ensure consistency between Z and Y variables
    for i in V:
        for j in V:
            if i != j:
                for k in range (1, b+1):
                    p.add_constraint(Z[i, j, k] <= Y[i, k])
                    p.add_constraint(Z[i, j, k] <= Y[j, k])
                    p.add_constraint(Z[i, j, k] >= (Y[i, k] + Y[j, k] - 1))


# Constraint 3: If vertex i is assigned color k, color k must be used
    for k in range(1, b+1):
        for i in V:
            p.add_constraint(Y[i, k] <= X[k])
        
# Constraint 4: Vertices of the same color must be at least i + 1 edges apart
    for i in V:
        for j in V:
            for k in range (1, b+1):
                p.add_constraint(C[i][j] >= ((k + 1)*Z[i, j, k]))

# Constraint 5: Every vertex must be colored
    for i in V:
        p.add_constraint(p.sum(Y[i, k] for k in range(1, b+1)) == 1)  # Use sum() instead of p.sum()
            
# Solve the ILP
    solution = p.solve()

# Display results
    graph.show(title=f"Graph {i + 1}", vertex_size=300, vertex_color="gold")
    print("Minimum number of colors used:", sum(p.get_values(X[k]) for k in range(1, b+1)))
    for i in V:
        for k in range(1, b+1):
            if p.get_values(Y[i, k]) > 0.5:  # Ensure binary condition
                print(f"Vertex {i} is assigned color {k}")
